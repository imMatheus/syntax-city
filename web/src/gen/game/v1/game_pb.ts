// @generated by protoc-gen-es v1.7.2 with parameter "target=ts"
// @generated from file game/v1/game.proto (package game.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * @generated from message game.v1.GetGameRequest
 */
export class GetGameRequest extends Message<GetGameRequest> {
  /**
   * @generated from field: string game_id = 1;
   */
  gameId = "";

  constructor(data?: PartialMessage<GetGameRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "game.v1.GetGameRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "game_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetGameRequest {
    return new GetGameRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetGameRequest {
    return new GetGameRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetGameRequest {
    return new GetGameRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetGameRequest | PlainMessage<GetGameRequest> | undefined, b: GetGameRequest | PlainMessage<GetGameRequest> | undefined): boolean {
    return proto3.util.equals(GetGameRequest, a, b);
  }
}

/**
 * @generated from message game.v1.Player
 */
export class Player extends Message<Player> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: string name = 2;
   */
  name = "";

  constructor(data?: PartialMessage<Player>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "game.v1.Player";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Player {
    return new Player().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Player {
    return new Player().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Player {
    return new Player().fromJsonString(jsonString, options);
  }

  static equals(a: Player | PlainMessage<Player> | undefined, b: Player | PlainMessage<Player> | undefined): boolean {
    return proto3.util.equals(Player, a, b);
  }
}

/**
 * @generated from message game.v1.GameBoard
 */
export class GameBoard extends Message<GameBoard> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: repeated game.v1.Player players = 2;
   */
  players: Player[] = [];

  constructor(data?: PartialMessage<GameBoard>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "game.v1.GameBoard";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "players", kind: "message", T: Player, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GameBoard {
    return new GameBoard().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GameBoard {
    return new GameBoard().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GameBoard {
    return new GameBoard().fromJsonString(jsonString, options);
  }

  static equals(a: GameBoard | PlainMessage<GameBoard> | undefined, b: GameBoard | PlainMessage<GameBoard> | undefined): boolean {
    return proto3.util.equals(GameBoard, a, b);
  }
}

/**
 * @generated from message game.v1.GetGameResponse
 */
export class GetGameResponse extends Message<GetGameResponse> {
  /**
   * @generated from field: game.v1.GameBoard game_board = 1;
   */
  gameBoard?: GameBoard;

  constructor(data?: PartialMessage<GetGameResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "game.v1.GetGameResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "game_board", kind: "message", T: GameBoard },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetGameResponse {
    return new GetGameResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetGameResponse {
    return new GetGameResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetGameResponse {
    return new GetGameResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetGameResponse | PlainMessage<GetGameResponse> | undefined, b: GetGameResponse | PlainMessage<GetGameResponse> | undefined): boolean {
    return proto3.util.equals(GetGameResponse, a, b);
  }
}

